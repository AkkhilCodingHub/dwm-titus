#!/bin/env sh

# INIT
printf "$$" > ~/.cache/pidofbar
sec=0

# MODULES
update_cpu () { 
	cpu="$(grep -o "^[^ ]*" /proc/loadavg )" 
}

update_memory () { 
	memory="$(free -h | sed -n "2s/\([^ ]* *\)\{2\}\([^ ]*\).*/\2/p")"
}

update_time () { 
	time="$(date "+%a %d %b %I:%M %P")" 
}

update_weather () { 
	weather="$(curl -s "wttr.in/dallas?format=1"| sed -E "s/^(.).*\+/\1/")" 
}

update_bat () { 

	if [[ -e /sys/class/power_supply/BAT0/status ]]; then
        read -r bat_status < /sys/class/power_supply/BAT0/status
	fi

	if [[ -e /sys/class/power_supply/BAT0/capacity ]]; then
				read -r bat_capacity < /sys/class/power_supply/BAT0/capacity
				bat="$bat_status $bat_capacity%"
	fi

}

update_vol () { 
	vol="奄$(pactl list sinks | grep '^[[:space:]]Volume:' | head -n $(( $SINK + 1 )) | tail -n 1 | sed -e 's,.* \([0-9][0-9]*\)%.*,\1,')%"
}

update_backlight () { 
	# you might need to change the path depending on your device
if [[ -e /sys/class/backlight/intel_backlight/actual_brightness ]]; then

	read -r actual_brightness </sys/class/backlight/intel_backlight/actual_brightness
	read -r max_brightness </sys/class/backlight/intel_backlight/max_brightness
	backlight="☀$((actual_brightness*100/max_brightness))%"
fi
}

# For calcurse users, refer https://github.com/pystardust/automeet
#update_event () { 
#	event="$(calcurse -n | sed 1d | \
#		sed -E "s_^ *\[(.*):(.*)\] ([^\t]*)\t?.*_[\1h \2m->\3]_")" 
#	[ "[]" = "$event" ] && event=""
#}


# modules that don't update on their own need to be run at the start for getting their initial value
update_vol
if [[ -e /sys/class/backlight/intel_backlight/actual_brightness ]]; then
  update_backlight
fi
display () { 
	#printf "%s\n" " $event [$weather] [$memory $cpu] [$bat] [$backlight] [$vol] $time "
	xsetroot -name " $bat $backlight $vol $time "
}

# SIGNALLING
# trap	"<function>;display"		"RTMIN+n"
trap	"update_vol;display"		"RTMIN"
trap	"update_backlight;display" 	"RTMIN+1"
trap	"update_bat;display" 		"RTMIN+2"
# to update it from external commands
## kill -m "$(cat ~/.cache/pidofbar)"
# where m = 34 + n

while true
do
	sleep 1 & wait && { 
		# to update item ever n seconds with a offset of m
		## [ $((sec % n)) -eq m ] && udpate_item
		[ $((sec % 5 )) -eq 0 ] && update_time 	# update time every 5 seconds
		[ $((sec % 5 )) -eq 0 ] && update_vol # update time every 5 seconds
		[ $((sec % 60)) -eq 0 ] && update_bat
		[ $((sec % 5 )) -eq 0 ] && display
		sec=$((sec + 1))
	}
done 



